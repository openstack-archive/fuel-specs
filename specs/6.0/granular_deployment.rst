..
 This work is licensed under a Creative Commons Attribution 3.0 Unported
 License.

 http://creativecommons.org/licenses/by/3.0/legalcode

============================================================================
Granular deployment for fuel roles
============================================================================

Problem description
===================

As the project grows it becomes hard to maintain and extend one set
of configuration management script. It results in significant limitations:
- any new feature implementation leads to cross-dependencies in code
- it is hard for newcomers to add additional features to existing code
- impossible to implement plugin support for deployment

Proposed change
===============

Iteration 1.
Goal: Simple model for plugable deployment actions

After this iteration will be completed - it should be possible to execute
any number of actions for specific fuel role.
For example, lets consider additional cinder driver implementation,
something like GlusterFS.
Fuel will require modification in next areas:
- Role glusterfs for fuel
- Additional facts generated by nailgun for specific role
- Separate puppet manifests (or other config management tools)
- Information how to run those manifests

Additional facts and roles
-----------------------------
Plugin writer will provide additional facts either by using fuel client
or by plugins for nailgun.
This is not in the scope of this spec, so lets assume we have all required
configs data to deploy something like GlusterFS.
In nailgun task_metadata for release will be stored/provided by fuel
client like:

glusterfs:
    -
      priority: 0
      description: Network configuration, maybe something else
      name: config_network
    -
     priority: 20
     description: Run deployment for glusterfs
     name: deploy_glusterfs

glusterfs - role id
deploy_glusterfs and base_configuration - task ids
priority - will be used to perform tasks in right order
description and name - will be used mainly for better UX (if we need it)


Plugin configuration management and metadata to run those tools
---------------------------------------------------------------
Plugin writer will prepare package with manifests/simple bash scripts
and metadata about how run them.
This tools (scripts and metadata) will be placed on master node in
specified folders.
And astute will rsync them on deployment start or as separate action.

TODO(Add format for TaskAPI metadata)


Alternatives
------------

In general we dont have time to work on replacement of astute,
for next reasons:

1. Short release cycle for 6.0.

2. Any disruptive changes will require tremendous amount of qa resources,
and can limit overall team velocity.

3. Quite unique deployment model, so anything we will choose will require
    customization.

Additional updates will be provided later.

- Mistral
- Salt
- Custom orchestrator with celery


Data model impact
-----------------

DB:
task_metadata field on Release model will be required to store tasks
for all roles.

    controller:
        -
          priority: 0
          description: Network configuration, maybe something else
          name: network_config
    compute:
        -
          priority: 0
          description: Network configuration, maybe something else
          name: network_config
        -
          priority: 10
          description: Task for deployment of nova compute
          name: deploy_compute


Astute facts:
Nailgun will generate additional section for astute facts.
This section will contain list of tasks with its priorities for specific role.
Astute fact will be extended with tasks exactly in same format it is stored
in database, so if we are generating fact for compute role,
astute will have section like:

tasks:
    -
      priority: 0
      description: Network configuration, maybe something else
      name: deploy_all
    -
      priority: 10
      description: Task for plugin deployment
      name: deploy_xen

Task format perspective:
    Will be extended.


Task deployment process
-----------------------

1. When deployment plugin is installed it should place tasks order extension
in yaml format. By default it will be:
/etc/fuel/tasks/{release}/*.yaml
2. On deployment start nailgun will perform lookup by glob:
/etc/fuel/tasks/{cluster.release.version}/*.yaml
If any configuration is there we are validating it and proceed
with deployment
3. tasks subsection will be added to deployment_info sended for node to astute
4. astute executes tasks for each role in linear fashion

Conditional tasks
-----------------

To support task execution based on cluster settings/network provider settings/
maybe something else ???
we will use same expression parser that is used on UI for restrictions:

https://github.com/stackforge/fuel-web/blob/master/nailgun/nailgun/utils/
expression_parser.py

Next example will be always evaluated as false ofcourse, just for example:

controller:
  - condition: 'false'
    description: Install vcenter driver
    name: install_vcenter_driver
    priority: 20

And this one makes sense actually:

controller:
  - condition: "settings:common.libvirt_type.value == 'vcenter'"
    description: Install vcenter driver
    name: install_vcenter_driver
    priority: 20


REST API impact
---------------
Iteration 1:
Current rest api implementation will be enough to modify/add tasks
for specific release.

Iteration 2:
Rest api will be extended to support different kinds of operation with tasks.
For example something like:
fuel deploy --node 3 --tasks 0-10
That will execute only tasks with priorities from 0 to 10.
Will be designed later if there will be time for this stuff.

Upgrade impact
--------------

Support for invoking different astute task names in nailgun based
on release version. If we are managing cluster with 5.1 release we will
use Puppet plugin to deploy/patch slaves. But in 6.0 it will be TaskAPI plugin.
This basic versioning support will be done in nailgun.

Security impact
---------------

Notifications impact
--------------------

We can show user exact step of deployment task with description and name.

Other end user impact
---------------------

Performance Impact
------------------

No singnificat changes in execution model, so i assume deployment time
will stay the same.

Other deployer impact
---------------------

It will be possible to execute only desired scripts on target slave node.

Developer impact
----------------

Easier debuging/development process.

Implementation
==============

Assignee(s)
-----------

Primary assignee:
  Dmitry Ilyin <dilyin@mirantis.com>
  Dmitry Shulyak <dshulyak@mirantis.com>
  Vladimir Sharshov <vsharhov@mirantis.com>


Work Items
----------
Iteration 1:
- write TaskAPI mcollective plugin that will invoke cmd interface for
TaskAPI util
- Refactor/Add separate deployment method to work with task list provided
by nailgun and use TaskAPI plugin
- prepare packages for TaskAPI and move Dmitry Ilyin's implementation
to fuel-astute/fuel-library repo or create new one (fuel-tasklib ???)

Dependencies
============

Testing
=======

Every new piece of code will be covered by unit tests.
Everything will be automaticly covered by system tests.
Will be great to implement functional tests to run deployment for
each role with its own actions.

Documentation Impact
====================

References
==========
