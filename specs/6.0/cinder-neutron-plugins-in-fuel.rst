..
 This work is licensed under a Creative Commons Attribution 3.0 Unported
 License.

 http://creativecommons.org/licenses/by/3.0/legalcode

==========================================
Cinder/Neutron plugins in fuel
==========================================

https://blueprints.launchpad.net/fuel/+spec/cinder-neutron-plugins-in-fuel

Cloud operators want to extend and change behavior of Fuel in order to
do that, Fuel should provide plugin mechanism.

Problem description
===================

Sometimes Fule user wants to extend Fuel to install Cinder/Neutron
plugin. Right now user changes the code of Fuel services rebuilds
and adds repositories manually.

The current approach causes a lot of problems:
* user has to support all the patches
* also he has to apply all the patches manually after Fuel upgrade

Proposed change
================

Requirements
------------

* user should be able to install simple Cinder/Neutron
  plugins, "simple" means that plugin doesn't require
  additional business logic, user can configure only
  static data for settings tab
* plugin developer in the most cases should know nothing
  about python/js/css/html
* plugin developer should have easy way to test his plugin
  (he shouldn't reinstall his master node again and again to
  test his plugin)

List of terms
-------------

* `plugin` - archive which contains all required data, like
  repositories for ubuntu, centos, metadata file with description
  of plugin, scripts, etc
* `fuel-plugin` - is command line tool which helps user to
  develop plugin

Plugins constraints
-------------------

For the current release we have the next constraints:

* plugin cannot change business logic and should not contain
  any python code
* plugin can provide additional attributes for environment
* plugin cannot add new kernel
* plugin cannot change provisioning data
* plugin cannot change deployment data, it can only add
  new data which in terms of nailgun are called `cluster attributes`

Plugins examples
----------------

* Neutron

  * LBaaS https://wiki.openstack.org/wiki/Neutron/LBaaS

* Cinder
  Research TO BE DONE by Stanislaw
  https://wiki.openstack.org/wiki/CinderSupportMatrix
  we assume that it will be GlusterFS plugin

Plugin development process
--------------------------

* user runs `fuel-plugin create plugin-name`
* fuel-plugin creates new directory `plugin-name`, where he can see
  the a basic structure of the plugin with in place documentation
* user adds his packages with all required dependencies for ubuntu
  and centos
* sets the metadata, like version of the plugin, its description,
  and versions of openstack releases
* then he runs `fuel-plugin build` from the plugin directory,
  fuel-plugin builds the repositories and generates tar-ball

Plugin installation process
---------------------------

From user point of view:

* user downloads the plugin
* unarchives it in temporary directory
* runs install script which was in the archive, user should provide
  nailgun credentials (user/password) for the script

Install script workflow:

* check if current fuel version is compatible with the plugin
* copy all the files in `/var/www/plugins/plugin_name-plugin_version`
* via rest api create plugin in nailgun

Plugin archive structure
------------------------

This structure should be generated by `fuel-plugin` script.

.. code-block:: text

    .
    ├── deployment_scripts
    │   └── 2014.2-6.0
    ├── environment_attributes.yaml
    ├── LICENSE
    ├── metadata.yaml
    ├── README.md
    ├── repositories
    │   └── 2014.2-6.0
    │       ├── centos
    │       └── ubuntu
    └── tasks
        └── 2014.2-6.0

Here is detailed description of some of the files:

**metadata.yaml file**

.. code-block:: yaml

   # Plugin version
   version: 0.1
   # Description
   description: Enable to use pluginx X for Neutron
   # Required fuel version
   fuel_version: 5.0
   # The plugin is compatible with releases in the list
   releases:
     - os: ubuntu
       version: 2014.2-6.0
     - os: centos
       version: 2014.2-6.0
   # Plugin types are required to determine what this plugins
   # extends and how to install them
   types:
     - nailgun
     - repository
   # Version of plugin package
   package_version: 1
   # Define if this plugins depends on other fuel plugins
   # TO BE DISCUSSED should we implement this for 6.0?
   depends_on_plugins:
     - set if plugin depends on other plugins

**tasks format description**

.. code-block:: yaml

   # TO BE DISCUSSED with Vladimir S and Dmitry S

Directories structure on the master node
----------------------------------------

Directory `/var/www/plugins` which contains all
of the plugins, should be mounted to the next containers.

* rsync - for puppet manifests
* nailgun - to extend nailgun
* nginx - is required for repositories

Alternatives
------------

There are a lot of alternatives, the best of them are described
in `Future improvements` section and will be implemented later.

Future improvements (not for 6.0)
---------------------------------

Plugin manager
^^^^^^^^^^^^^^

Separate services which keeps information about all of the plugins
in the system, it should know how to install or delete plugins.
We will use this service instead of install script to install the
plugins.

Plugins which change business logic
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Nailgun drivers and hooks which will provide a way to change
deployment/provisioning data for orchestrator.
Also it will be possible to add new role.

UI plugins
^^^^^^^^^^

Add new step in wizard, add new tab, for cluster env, add new settings
window for node configuration.

Plugins which implement separate service
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

User will be able to install any service on the master node,
the good example of such kind of plugins is OSTF.

Users requirements for Fuel plugins
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

General use cases:

* ability to execute custom puppet code during deployment state
  (ideally on any stage not only as a post deployment step)
* ability to execute custom python code in Nailgun

  * Define custom roles and node priorities
  * Provisioning serialization
  * Deployment serialization
  * Post deployment orchestration

* ability to execute custom java script code
* ability to modify UI
* ability to add custom deb/rpm packages
* ability to change and extend node specific parameters

More specific use cases:

* Swift standalone installation: custom roles, priorities, UI changes
* Add neutron plugin: custom puppet modules, UI changes
* Custom monitoring schema: UI, priorities, puppet
* Custom Cinder driver: UI, puppet
* Cinder multibackend: UI, puppet
* Add package that require reboot: provisioning customization

Data model impact
-----------------

There will be new model in nailgun, `Plugins` with many to many
relation to `Cluster` model.
Model for many to many relation `ClustersPlugins` will be used in
order to disable or enable plugin for specific environment.

**Plugins**

* `id` - unique identificator
* `name` - plugin name
* `version` - plugin version
* `description` - plugin description
* `fuel_version` - fuel version
* `openstack_releases` - is a list of strings with releases

**ClustersPlugins**

* `id` - record id
* `plugins.id` - plugin id
* `clusters.id` - cluster id

REST API impact
---------------

**GET /api/v2/plugins/**
Returns the list of plugins

.. code-block:: json

    [
        {
            "id": 1,
            "name": "plugin_name",
            "version": "1.0",
            "description": "Enable to add X plugin to Neutron",
            "fuel_version": "6.0",
            "package_version": 1,
            "releases": [
                {
                    "os": "ubuntu",
                    "version": "2014.2-6.0"
                },
                {
                    "os": "centos",
                    "version": "2014.2-6.0"
                }
            ]
        }
    ]

**POST /api/v2/plugins/**


.. code-block:: json

    {
        "id": 1,
        "name": "plugin_name",
        "version": "1.0",
        "description": "Enable to add X plugin to Neutron",
        "fuel_version": "6.0",
        "releases": [
            {
                "os": "ubuntu",
                "version": "2014.2-6.0"
            },
            {
                "os": "centos",
                "version": "2014.2-6.0"
            }
        ]
    }


**GET /api/v2/plugins/1/**
Get the information about specific plugin, where 1 is id of the plugin

.. code-block:: json

    {
        "id": 1,
        "name": "plugin_name",
        "version": "1.0",
        "description": "Enable to add X plugin to Neutron",
        "fuel_version": "6.0",
        "releases": [
            {
                "os": "ubuntu",
                "version": "2014.2-6.0"
            },
            {
                "os": "centos",
                "version": "2014.2-6.0"
            }
        ]
    }

**PATCH /api/v2/plugins/1/**
Update specified attributes for plugin
Accepts the same format as response from `GET` request.

**PUT /api/v2/plugins/1/**
Update all of the attributes
Accepts the same format as response from `GET` request.

**Add new attribute for cluster handlers**
**GET/PUT /api/v2/clusters/ or /api/v2/clusters/1/**

.. code-block:: json

   {
       "plugins": [1,2,3]
   }


Hooks in nailgun
^^^^^^^^^^^^^^^^

Nailgun should provide the next hooks, where we will be able to change
the default data:

* cluster attributes
* we should be able to add repository with plugin's packages
* nailgun should extend default deployment/patching tasks with tasks
  for pre and post deployment hooks, where should be specified paths
  to scripts directory on the master node

Upgrade impact
--------------

Current release
^^^^^^^^^^^^^^^

Because we don't have any python code in our plugins, plugin will depend on
openstack release, we don't delete releases, as result it's not necessary
to check if plugin is compatible with the current version of fuel.

Future releases
^^^^^^^^^^^^^^^

When we get plugins with python code, in upgrade script we will have to
check if plugins are compatible with the new version of fuel, if they
aren't compatible, upgrade script should show the message with the list
of incompatible plugins and it should fail the upgrade.
If user wants to perform upgrade, he should provide the directory with
new plugins, which will be updated during the upgrade, or user should
delete plugins which he doesn't use.

Security impact
---------------

This feature has a huge security impact because the user will be able
to execute any command on slave nodes.
Security is included in acceptance criteria of plugins certification,
see `Plugins certification` section.

Notifications impact
--------------------

Installation script will create notification after plugin is installed.

Other end user impact
---------------------

User should be able to disable or enable plugin for specific environment.

Performance Impact
------------------

**Deployment**

* there will not by any impacts if user doesn't have enabled plugins
* if user has enabled plugins for environment, there will be performance
  impact, the time of deployment will be increased, the increasing time
  depends on the way how plugin is written

**Nailgun**

* we assume that there will not be any notable performance impact, in hooks
  we will have to enable merging of custom attributes in case if plugin is
  enabled for environment, the list of the plugins can be gotten within a
  single database query

Also performance is added as acceptance criteria for core plugins,
see `Plugins certification` section.

Other deployer impact
---------------------

Plugin developer will be able to execute pre/post deployment hooks for
the environment.

Plugins certification
---------------------

Iteams which should be reviewed during plugin certification:

* Security review
* Performance review
* Compatibility with other plugins in core
* Plugins upgrade
* Check that plugin works fine in case of openstack patching

After plugin is certified user should be able to add plugin in our
plugins repository.

Developer impact
----------------

Features design impacts:

* any new feature should be considered to be a plugin
* features should be designed to be extendable

Development impacts:

* we should try not to break compatibility with plugins, it should be
  very easy for plugins developer to make migration from previous
  version of Fuel to new one

Implementation
==============

Assignee(s)
-----------

Primary assignee:

* eli@mirantis.com - developer, feature lead
* nmarkov@mirantis.com - python developer

Other contributors:

* sbogatkin@mirantis.com - deployment engineer
* vsharshov@mirantis.com - orchestrator developer
* aurlapova@mirantis.com, tleontovich@mirantis.com - QA engineers
* ishishkin@mirantis.com - devops engineer (plugins distribution)

Work Items
----------

* Plugin creation tools - creates plugin skeleton, builds the plugin,
  also it should provide installation script

* Nailgun - should provide ability to enable/disable plugins
  for specific environments, also it should read plugin's attributes
  and merge them on the fly

* Nailgun/Orchestrator - nailgun should provide post/pre deploy tasks
  for orchestrator, orchestrator should provide post/pre deploy hooks

* UI - ability to enable/disable plugin for specific environment

Dependencies
============

Nailgun dependencies which should be added within implementation
of Ceph plugin:

* SQLAlchemy==0.9.4
* stevedore==0.15

Testing
=======

There will be several core plugins, which QA team will be able
to install and test.

For neutron it will be LBaaS plugin, for Cinder (TO BE DONE specify
cinder plugin).

Also it will be required to have infrastructure, where plugin developer
will be able to test his plugins. He should have ability to specify plugin
repository and the set of plugins, which he would like to run tests with.

Documentation Impact
====================

* for plugins developer, with the information how to create a plugin
* for plugins developer, with the information how to add plugin in core
  repository and how to perform testing
* documentation for plugins user, where will be the information where to take
  the plugin and how to install them

References
==========

* Nailgun, Ceph as a plugin - https://review.openstack.org/#/c/123840/
* Fuel design summit 2014 -
  https://etherpad.openstack.org/p/fuel-meetup-2014-pluggable-architecture
* User customization requests -
  https://etherpad.openstack.org/p/fuel-plugins-cloud-operators-feedback
* Users complaints about fuel customization - http://bit.ly/1rz4X2B
* Neutron plugins - https://wiki.openstack.org/wiki/Neutron#Plugins
* Cinder plugins - https://wiki.openstack.org/wiki/CinderSupportMatrix
