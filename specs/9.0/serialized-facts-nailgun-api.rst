..
 This work is licensed under a Creative Commons Attribution 3.0 Unported
 License.

 http://creativecommons.org/licenses/by/3.0/legalcode

======================================
Nailgun API to manage serialized facts
======================================

https://blueprints.launchpad.net/fuel/+spec/serialized-facts-nailgun-api

API for downloading serilized deployment facts. It shall be used for
the following scenarios:

* create data resources in Solar
* access facts directly from Puppet agent via Hiera HTTP backend
* access facts from 3rd party applications

This spec is focused on the second use case.

--------------------
Problem description
--------------------

Currently, the serialized facts are uploaded to target nodes as an
``/etc/hiera/astute.yaml`` file, and Puppet agents access it via
Hiera's standard ``yaml`` backend as ``astute`` datasource.

Based on the fact from ``astute.yaml`` and from local facter,
the deployment task ``globals`` creates another set of facts and
writes them to file ``globals.yaml``. It serves as ``globals``
data source for Hiera.

There are also overrides from plugins, OpenStack configuration
feature [1]_ and node-specific overrides all defined in Hiera's
hierarchy of data sources as local ``yaml`` files.

This makes it difficult to update the facts on the node. It also
doesn't allow for keeping track of changed settings. Revert to the
original facts is also not possible.

----------------
Proposed changes
----------------

The proposed change will allow the new way to access the already
existing serialization functionality. New API extension shall respond
to GET requests with the result of serialization of deployment
facts from Fuel settings.

The API extension shall also allow to store the serialized deployment
configuration with POST request to an URL for a corresponding
data source.

The context of the serialization shall be provided with the parameter
in the URL of GET/POST request.


Web UI
======

No changes to UI are proposed in this spec.

Nailgun
=======

New API calls and corresponding handlers shall be introduced to
provide access to results of serialization of deployment facts
for a node. These handlers shall be implemented as an extension
in Nailgun [2]_.

Data model
----------

A new MySQL ``deployment_data`` table shall be created to store
the serialised data. The table shall have the following fields:

* ``id``: primary key field, integer, autoincrement

* ``cluster_id``: identifies the cluster that contains the node,
  foreign key in the ``clusters`` table

* ``node_id``: identifies the node defined by the data, foreign key
  in the ``nodes`` table

* ``version``: identifies the version of the serialized
  data, incremented with every upload of facts to the API

* ``datasource``: id of the data source, ENUM with the following
  values:

  * ``astute`` for facts uploaded as ``astute.yaml`` file

  * ``globals`` for facts generated locally on a node

  * ``nodes`` for facts related to other nodes in environment

  * ``override/plugins`` for data generated by Fuel plugins

  * ``override/configuration`` for data generated by OpenStack
    configurations feature [1]_

* ``data``: text string that contains serialized data from the
  given data source

REST API
--------

* Download the latest version of serialized deployment
  facts for the given node ID and data source

    * Method type: GET

    * ``<:endpoint_uri>/environment/<:deployment_id>/node/<:id>/resource/<:datasource>/values/<:version>``

    * Normal HTTP response code(s): 200 OK

    * Expected error HTTP response code(s):

      * 400 Bad Request
        Data source is not supported.

      * 404 Not Found
        Cannot found a node with the given identifier.

      * 404 Not Found
        Cannot found a given version of data for the given cluster, node and
        data source.

      * 409 Conflict
        Node with the given ID not assigned to cluster with the given ID.

    * Parameters which can be passed via the URL

      * ``endpoint_uri`` is a parameter that depends on contents of
        Keystone service catalog for the node. Defaults to ``/api/v1/config``.

      * ``deployment_id`` identifies an OpenStack environment
        that contians the node being queried

      * ``id`` is an ID of node being queried, shall be equal to FQDN
        of the node

      * ``datasource`` is a text name of the queried data source.
        See the `Data Model`_ section for the available data sources.

      * ``version`` identifies the version to access. Defaults
        to the latest version available for the given data source.

    * JSON schema definition for the body data if allowed

    * JSON schema definition for the response data if any

* Upload serialized deployment facts for a node by ID and data source

    * Method type: POST

    * ``<:endpoint_uri>/environment/<:deployment_id>/node/<:id>/resource/<:datasource>/values``

    * Normal HTTP response code(s): 200 OK

    * Expected error HTTP response code(s):

      * 400 Bad Request
        Data source is not supported.

      * 404 Not Found
        Cannot found a node with the given identifier.

      * 404 Not Found
        Cannot found a given version of data for the given cluster, node and
        data source.

      * 409 Conflict
        Node with the given ID not assigned to cluster with the given ID.

    * Parameters which can be passed via the URL

      * ``endpoint_uri`` is a parameter that depends on contents of
        Keystone service catalog for the node. Defaults to ``/api/v1/config``.

      * ``deployment_id`` identifies an OpenStack environment
        that contians the node being queried

      * ``id`` is an ID of node being queried, shall be equal to FQDN
        of the node

      * ``datasource`` is a text name of the queried data source
        See the `Data Model`_ section for the available data sources.

    * JSON schema definition for the body data if allowed

    * JSON schema definition for the response data if any

Orchestration
=============

General changes to the logic of orchestration should be described in
details in this section.

A task shall be added to the Astute orchestrator to fetch all
``yaml`` files from ``/etc/hiera`` directory, and upload their contents
into corresponding data sources. [3]_

RPC Protocol
------------

No specific changes to orchestration or RPC protocol are proposed
by this particular specification. However, in future it might allow to
exclude serialized deployment facts data from the RPC exchange between
Astute and Nailgun.

Fuel Client
===========

Client should be implemented with the support for the described
API calls. This command should yield a serialized facts data in selected
format (``json`` or ``yaml``) to the ``stdout`` stream.

A separate client option shall be added to add or update facts to the
store. This client must provide an ability to read/write key-value pairs
from the ConfigDB API for all available data sources.

Following CLI parameters shall be supported for ``cfgdb-client``:

* ``--env <ID>`` identifies the cluster-level namespace. Cannot
  be combined with ``--node`` option.

* ``--node <FQDN>`` identifies a node namespace. Cannot be
  combined with ``--cluster`` option.

* ``--datasource <NAME>`` identifies a data source namespace
  under node namespace. Cannot be combined with ``--env``
  option.

* ``--key KEY`` defines a name of
  key to manage. Mandatory argument.

* ``--value VALUE`` defines a value
  to be assigned to the key identified by first argument. Optional
  argument. If omitted, a value of ``KEY`` is returned.

* ``--format [json|yaml]`` defines a format of output. Default is ``json``.

Plugins
=======

Plugins configuraion data shall be included in the serialization of
``astute`` data source. The overrides for the elements of the
``astute`` data not related to Plugin data will be available via
``override/plugins`` data source.

Fuel Library
============

None.

------------
Alternatives
------------

What are other ways of achieving the same results? Why aren't they followed?
This doesn't have to be a full literature review, but it should demonstrate
that thought has been put into why the proposed solution is an appropriate one.

The alternative approach would be to create a dedicated service to facilitate
the exchange of the serialized data between different components of the Fuel
installer (i.e. ConfigDB [4]_). However, this requires significant changes to
the architecture of the system. This path shall be pursued in the following
major release of Fuel software.

--------------
Upgrade impact
--------------

With the upgrade of the Fuel Admin node, the serialized facts data will be
reset. No tracking of changes in facts shall be available between upgrades.

---------------
Security impact
---------------

The serialized deployment facts contain sensitive data such as access
credentials to different components in the system.

The access to the endpoint must follow the same conventions as other
API endpoints in Nailgun. The endpoint must support Keystone-based
authentication and Basic HTTP Auth. The endpoint must provide SSL
connection.

--------------------
Notifications impact
--------------------

None.

---------------
End user impact
---------------

None.

------------------
Performance impact
------------------

None.

-----------------
Deployment impact
-----------------

None.

----------------
Developer impact
----------------

None.

---------------------
Infrastructure impact
---------------------

None.

--------------------
Documentation impact
--------------------

None.

--------------
Implementation
--------------

Assignee(s)
===========

Who is leading the writing of the code? Or is this a blueprint where you're
throwing it out there to see who picks it up?

If more than one person is working on the implementation, please designate the
primary author and contact.

Primary assignee:
  <gelbuhos> Oleg S. Gelbukh

Other contributors:
  <sabramov> Sergey Abramov
  <sryabin>  Sergey Ryabin
  <ytaraday> Yuriy Taraday

Mandatory design review:
  <sbrimhall>  Scott Brimhall
  <ikalnitsky> Igor Kalnitskiy
  <rustyrobot> Evgeniy Li


Work Items
==========

* Implement an API handler and supplementary logic in Nailgun source code
  tree.

* Update documentation to reflect changes in the Nailgun API.

* Implement simple client application to communicate to the API.

Dependencies
============

None.

------------
Testing, QA
------------

TBD

Acceptance criteria
===================

* API handler responds with the serialized deployment facts according to
  the specification.

----------
References
----------

.. [1] OpenStack configuration https://github.com/openstack/fuel-specs/blob/master/specs/8.0/openstack-config-change.rst
.. [2] Extensions mechanism in Nailgun https://github.com/openstack/fuel-specs/blob/master/specs/9.0/stevedore-extensions-discovery.rst
.. [3] Upload serialized deployment facts to ConfigDB https://blueprints.launchpad.net/fuel/+spec/upload-deployment-facts-to-configdb
.. [4] ConfigDB specification draft https://review.openstack.org/#/c/281331/
