..
 This work is licensed under a Creative Commons Attribution 3.0 Unported
 License.

 http://creativecommons.org/licenses/by/3.0/legalcode

==========================================
Replace OBS with another build system
==========================================

https://blueprints.launchpad.net/fuel/+spec/replace-obs

https://blueprints.launchpad.net/fuel/+spec/enable-gpg-check-and-sign

Problem description
===================

* As a CI engineer, I need a package build system that doesn't introduce package management limitations compared to upstream Linux distros used in MOS
* As the Cloud Administrator I want to validate integrity of all Mirantis OpenStack packages with end-to-end signatures on either individual rpm packages or whole deb package repositories

We've found following fundamental limitations of OBS:

* OBS builds packages in its own way which is different from upstream. It causes an issues when upstream package can't be rebuilt without changing packages sources.
* OBS rebuilds package when its build dependency changed (and doesn't update revision number of such package)
* OBS uses base upstream packages for target in the building stage. Every change in the target causes rebuilding of each package which was built with this target.
* OBS doesn't support publishing udeb binary packages. This is due to the fact that it uses plain debian repository structure. But deb and udeb packages should not be published in one reposotory.
* Our current OBS version (2.4) doesn't support debian python:any dependencies. That's why we decided to create new OBS (2.6) instance. We can't update current version because it totally breaks supporting previously shipped releases.
* OBS doesn't support signing with predefined key. Only OBS autogenerated keys can be used. Every OBS project has it's own key. Such keys can't be exported from OBS.
* It's quite hard to reproduce our CI due to OBS. Every MOS OBS project based on previously shipped project. (e.g. 6.1 and 6.0.1 based on 6.0 release, 6.0 based on 5.1 and so on). So if you need to reproduce our CI for 6.1 release, you need to rebuild all packages for all shipped releases since 3.2.

Proposed change
===============

This specification introduces replacement for existing OBS infrastructure using OSCI Docker Builder (ODB).

Solution will use standard upstream Linux distro tools to build packages (sbuild/mock),
publish packages to repositories and manage package repositories (reprepro/createrepo).

Every package will built in a clean and up-to-date buildroot.
Packages, their dependencies and build dependencies will be fully self-contained for each MOS release.
Any package included in any release can be rebuilt at any point in time using only the packages from that release.

Package build CI will be reproducible and can be recreated from scratch in a repeatable way.

ODB is based on Docker, which provides easy distribution. There will be created proper Docker Images for each supported Linux distro with necessary tools and scripts.

Puppet will be used for configuration of those images.

Alternatives
------------

None

Data model impact
-----------------

None

REST API impact
---------------

None

Upgrade impact
--------------

None

Security impact
---------------

None

Notifications impact
--------------------

None

Other end user impact
---------------------

* System will be able to perform package/repository signing
* Packaging CI infrastructure will be reproductible. 

Performance Impact
------------------

* Unnecessary rebuild of packages and their dependencies will be avoided. 

Other deployer impact
------------------------

None

Developer impact
----------------

None

Implementation
==============


Backward compatibility
----------------------


Work Items
-------------

* Need to create Puppet manifests for configuring ODB hosts
* Need to develop and test ODB
* Need to develop and test Package Publisher

Assignee(s)
-----------


Dependencies
============

None

Documentation Impact
====================

None

References
==========

None

Testing
=======
