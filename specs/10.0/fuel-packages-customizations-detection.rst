..
 This work is licensed under a Creative Commons Attribution 3.0 Unported
 License.

 http://creativecommons.org/licenses/by/3.0/legalcode

====================================================
Detect customizations of Fuel packages before update
====================================================

To have an ability effectively plan Fuel updates on customer sites we should be
able to see what is custom to cloud relative to GA (or GA + MU) release before
applying a new MU and be sure that update doesn't damage or destroy current
configuration.


-------------------
Problem description
-------------------

Currently we don't have an effective tool to detect customizations of Fuel
packages on deployed cloud. So we can get a situation when updating Fuel
packages to new versions can be disruptive for customer cloud.


----------------
Proposed changes
----------------

Fuel could include a tool for packages customizations detection which includes
two parts.

The first part is the data base contains for every Fuel release:

* versions of all Fuel packages
* hash sums of all files of all Fuel packages

The second part is a collector and checking module which:

* walks across the cloud nodes
* checks versions of packaged
* counts hashes of files
* compares hashes with database

---------------
Report examples
---------------

No customizatins found::

    Built-in md5 verification analysis: OK

Customizations found::

    custom [builtin-md5] fuel-dockerctl '8.0.0-1.mos7799' will be overwritten by MU2

Potential updates found::

    - fuel: GA to MU2 (from '8.0.0-1.mos6270' to '8.0.0-1.mos6280')

Everything is up to date::

    Potential updates: ALL NODES UP-TO-DATE

Web UI
======

None.


Nailgun
=======

None.


Data model
----------

None.


REST API
--------

None.


Orchestration
=============

None.


RPC Protocol
------------

None.


Fuel Client
===========

Add the following commands to the Fuel CLI::

    fuel -> customtest -> -f|--fake

The Fuel CLI command "customtest" will start the collector-check task on the
Fuel node itself and on all nodes connected to it.

Option "-f|--fake" will omit collection step and start only checking (source
data will be taken from previous executions).


Plugins
=======

None.


Fuel Library
============

None.


------------
Alternatives
------------

Alternative way is to install timmy-customtest and timmy library which it uses
separately via pip.


--------------
Upgrade impact
--------------

None.


---------------
Security impact
---------------

None.


--------------------
Notifications impact
--------------------

None.


---------------
End user impact
---------------

New feature proposes a convenient tool for Fuel upgrade planning and integrity
checking.

------------------
Performance impact
------------------

During the collection phase additional CPU load can be detected due to hash
calculating. Load can be reduced by options in config file.


-----------------
Deployment impact
-----------------

None. This spec affects only post-deployment process.


----------------
Developer impact
----------------

None.


---------------------
Infrastructure impact
---------------------

None.


--------------------
Documentation impact
--------------------

New customization check should be documented in respective section
of MOS documentation.


--------------
Implementation
--------------

Assignee(s)
===========

Primary assignee:

| Anton Samoylov

Other contributors:

| Dmitry Dmitriev

Mandatory design review:

| Vitaly Sedelnik <vsedelnik@mirantis.com>


Work Items
==========

* Refactor existing code [0]
* Build package
* Implement new Fuel CLI option "fuel customtest -f|--fake"


Dependencies
============

None.


-----------
Testing, QA
-----------

None.


Acceptance criteria
===================

Customization/integrity report should be generated by Fuel CLI command.


----------
References
----------

.. [0] https://github.com/f3flight/timmy-customtest/
