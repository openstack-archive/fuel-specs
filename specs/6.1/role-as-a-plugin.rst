..
 This work is licensed under a Creative Commons Attribution 3.0 Unported
 License.

 http://creativecommons.org/licenses/by/3.0/legalcode

================================
Deployment role as a Fuel plugin
================================

https://blueprints.launchpad.net/fuel/+spec/role-as-a-plugin

Cloud operators want to extend and change behavior of Fuel in order to
do that, Fuel should provide plugins mechanism.

Problem description
===================

Sometimes Fuel user wants to extend Fuel deploymen with
customized or new role. Currently user changes the
code of Fuel services, fixes deployment scripts, adds
required packages and builds repositories.

The current approach causes a lot of problems:

* user has to support all the patches
* also he has to apply all the patches manually after Fuel upgrade

Proposed change
================

List of terms
-------------

* `plugin` - archive which contains all required data, like
  repositories for ubuntu, centos, metadata file with description
  of plugin, scripts, etc
* `fpb` or `fuel-plugin-builder` - is fuel plugin builder, command
  line tool which helps user to develop plugin, the code will be
  in fuel-web repository
* `role` - entity in Fuel, which defines what deployment scripts
  will be applied to nodes, also it helps to define disk partitioning
  and networks for specific node

Requirements
------------

* user should be able to install plugin as a role, then
  assign it to the node and deploy
* plugin developer can change deployment and provisioning
  data, which Nailgun sends to Astute
* plugin can be uninstalled (???)
* plugin developer in the most cases should know nothing
  about python/js/css/html
* plugin developer should have easy way to test his plugin
  (he shouldn't reinstall his master node again and again to
  test his plugin)

Plugins constraints
-------------------

For the current release we have the next constraints:

* plugin cannot change business logic
* user will not be able to enable plugin on deployed environment
* plugin cannot change or add new bootstrap image
* plugin cannot change existing database schema
* plugins will work on openstack releases after 6.0 Fuel release,
  plugins won't work on 5.X openstack releases. This constraint
  is related to changes in MCollective plugins

Fuel plugin builder requirements
--------------------------------

Plugin archive structure changes
--------------------------------

This structure should be generated by `fpb` script.

.. code-block:: text

    .
    |-- deployment_scripts
    |   `-- deploy.sh
    |-- environment_config.yaml
    |-- LICENSE
    |-- metadata.yaml
    |-- pre_build_hook
    |-- README.md
    |-- repositories
    |   |-- centos
    |   |   `-- .gitkeep
    |   `-- ubuntu
    |       `-- .gitkeep
    `-- tasks.yaml

TODO describe changes for each file

Alternatives
------------

None

Data model impact
-----------------

**Plugins**

* `enabled` - add new field which tells if plugin is enabled for the
  new environment by default

REST API impact
---------------

None

Deployment scripts
------------------

In the current implementation plugin developer
can use only puppet deployment scripts to deploy
role (this constraint is related to Astute,
in the future release it might be changed with
Mistral)

* plugin developer should provide puppet scripts with all of
  the dependencies
* scripts should not break anything if they were
  run several times

Nailgun implementation
^^^^^^^^^^^^^^^^^^^^^^

TODO add information how plugins behaves if plugin is disabled or enabled

UI implementation
^^^^^^^^^^^^^^^^^

TODO add information about plugins on separate page

Upgrade impact
--------------

TODO add implementation details

In upgrade script we should check if plugins are compatible with the new
version of fuel, if they aren't compatible, upgrade script should show
the message with the list of incompatible plugins and it should fail
the upgrade. If user wants to perform upgrade, he should provide the
directory with new plugins, which will be updated during the upgrade,
or user should delete plugins which he doesn't use.

Security impact
---------------

This feature has a huge security impact because the user will be able
to execute any command on slave nodes.
Security is included in acceptance criteria of plugins certification,
see `Plugins certification` section.

Notifications impact
--------------------

None

Other end user impact
---------------------

User should be able to disable or enable plugin for specific environment.

Performance Impact
------------------

**Deployment**

* there will not be any impacts if user doesn't have enabled plugins
* if user has enabled plugins for environment, there will be performance
  impact, the time of deployment will be increased, the increasing time
  depends on the way how plugin is written

**Nailgun**

* we assume that there will not be any notable performance impact, in hooks
  we will have to enable merging of custom attributes in case if plugin is
  enabled for environment, the list of the plugins can be gotten within a
  single database query

Other deployer impact
---------------------

Plugin developer will be able to execute pre/post deployment hooks for
the environment.

Changes which are required in astute:

* add several repositories (should be ready, testing is required)
* add posibility to rsync specific directories from master to slave
* add hooks execution before and after puppet run

Developer impact
----------------

Features design impacts:

* any new feature should be considered to be a plugin
* features should be designed to be extendable

Implementation
==============

Assignee(s)
-----------

Primary assignee:

* eli@mirantis.com - developer, feature lead

Other contributors:

* TODO

Work Items
----------

* Fuel plugin builder should generate basic structure for
  plugin with a role

* Nailgun - should provide ability to enable/disable plugins
  for specific environments

* Nailgun - should provide hooks to change deployment/provisioning
  data

* UI - enable/disable plugins

* Fuel CLI - list/enable/disable/configure plugins for environment

Dependencies
============

This feature depends on Granular deployment feature:

https://blueprints.launchpad.net/fuel/+spec/granular-deployment-based-on-tasks

Testing
=======

TODO: Example of the plugin which our QA team will be able to tests.

Documentation Impact
====================

* how to create a plugin
* how to test a plugin
* how to debug a plugin
* how to add a plugin in core repository and how to perform testing
* documentation for plugin user, where will be the information where to take
  a plugin
* how to install a plugin

References
==========

* Nailgun, Ceph as a plugin - https://review.openstack.org/#/c/123840/
* Meeting notes 23 Dec 2015 -
  https://etherpad.openstack.org/p/fuel-ui-pluggable-architecture
* Plugins specification from previous release - http://bit.ly/1whwP81
