..
 This work is licensed under a Creative Commons Attribution 3.0 Unported
 License.

 http://creativecommons.org/licenses/by/3.0/legalcode

=================================================================
L23 networking refactoring in Nailgun/UI
=================================================================

Problem description
===================

According to [1],[2] orchestrator input data will be changed significantly.
This requires changes in Nailgun which allow convert networking information
into new output data that is thrown to orchestrator.

This blueprint proposed following changes:

1. implement network scheme for Nova-Network
2. change default network provider to native linux bridges
3. native linux bonding should be used instead of OVS bonds
4. use linux bridges where possible
5. refactor Multiple-Cluster-L2 part to address manifests changes
6. provide additional parameters for NICs and bonds from API input to
   orchestrator


Proposed change
===============

implement network scheme for Nova-Network
-----------------------------------------

Network configuration in case of Nova-Network is mostly harcoded on library
side. It is hard to maintain and develop. Network scheme should be implemented
for configuring Nova-Network enabled environments the same way as it is done in
case of Neutron now. This change will also allow support of bonding and other
features in Nova-Network enabled configurations. See [3].

change default network provider to native linux bridges
-------------------------------------------------------

Default L23 network provider is OVS now. OVS usage leads to a number of
problems (e.g. with bonding) so library part will provide support for both
native linux bridges (and bonds) and OVS objects. Nailgun should support
ability to assemble network configuration based on native linux objects. It
will use them by default. When networking is configured using UI, Nailgun will
always use native linux bridges/bonds as default. User can setup networking
using OVS objects via CLI (by uploading custom astute.yaml).

native linux bonding should be used instead of OVS bonds
--------------------------------------------------------

The same way as linux bridges, native linux bonds will be used instead of OVS
bonds. OVS bonds can be used with help of CLI (by uploading custom astute.yaml)
Modes and parameters of linux bonds are different from OVS bonds so it should
be taken into account. UI or API should provide proper lists of modes and
parameters for bonds based on different providers. This part is very similar
for both Neutron and Nova-Network.

use linux bridges where possible
--------------------------------

Not all OVS objects can be substitutes with linux ones. Exceptions are
Neutron/GRE, Neutron/VLAN, Neutron/floating subsystems, they have to use OVS.
So, network scheme generated by Nailgun should carefully deal with these
exceptions and properly connect objects of different type. One who make
network setup with astute.yaml should be aware of this.

refactor Multiple-Cluster-L2 part to address manifests changes
--------------------------------------------------------------

Manifests are being rewritten is this part. So, Nailgun should address the
changes. New scheme looks like:

    endpoints:
      br-mgmt:
        IP:
          - 192.168.101.3/24
        gateway: 192.168.101.1
        gateway-metric: 100
        routes:
          - net: 192.168.210.0/24
            via: 192.168.101.1
            metric: 10
          - net: 192.168.211.0/24
            via: 192.168.101.1
          - net: 192.168.212.0/24
            via: 192.168.101.1

Nailgun orchestrator serializer should calculate routes and pass them into
orchestrator. This should be done when cluster have several node groups.
Parameter "via" should be equal to network's gateway now but it can be separate
parameter later.

provide additional parameters for NICs and bonds from API input to orchestrator
-------------------------------------------------------------------------------

There are two sets of parameters defined in [1] for bonds and physical
interfaces: 'bond_properties' and 'interface_properties'.
Structures of these parameters are mostly defined for now but can be extended
in future. UI will support changing of some part of them. On the first stage UI
should provide possible values of parameters. Nailgun should provide default
values. 'interface_properties' parameters may not have default values defined.
Only 'interface_properties' parameters which were set explicitly should be
passed to orchestrator. It is planned to acquire actual parameters from
hardware and provide actual values via API on the next stage of feature
implementation.

Parameters to be set in UI on the first stage. See [1],[4] for details.

.. code-block:: yaml

  bond_properties:
    mode: balance-rr
    xmit_hash_policy: encap3+4

  interface_properties:
    ethtool:
      offload: on
    mtu: 9000


Alternatives
============
Task 6 can be done separately. Other tasks should be done all together if
current library changes [1] will be done completely.


Data model impact
=================
For task 3.
New bonding modes and hash policies should be added for linux bridges.
For task 6.
Field 'properties'(yaml type) should be added to NodeNICInterface and
NodeBondInterface tables. 'flags' field should be removed from
NodeBondInterface table.


REST API impact
===============
For task 3.
New bonding modes and hash policies should be added for linux bridges.
For task 6.
Field 'properties' should be vailable for GET/SET operations via
'/nodes/x/interfaces/' handler.


Upgrade impact
==============
For task 6.
DB migration.
For all tasks.
Nailgun orchestrator serializer versioning.
API will not have new handlers and no version increace to be made for current
ones as this change does not lead to modification of current API data just adds
new data.


Security impact
===============
None


Notifications impact
====================
None


Other end user impact
=====================
All new 6.1 deployments when configured via UI will have networking based on
native linux bridges and bonding. Nova-Network enabled 6.1 deployments will
support bonding.


Performance Impact
==================
None


Other deployer impact
=====================
See [1].


Developer impact
================
Most significant changes will be made in Nailgun orchestrator serializer.
Its networking part for 6.1 will mostly be rewritten.


Implementation
==============
Started.


Assignee(s)
===========

Primary assignee:
  * Aleksey Kasatkin (akasatkin) <akasatkin@mirantis.com>

Other contributors:
  * Sergey Vasilenko (xenolog) <svasilenko@mirantis.com>
  * Vitaly Kramskikh (vkramskikh) <vkramskikh@mirantis.com>
  * Stanislaw Bogatkin (sbogatkin) <sbogatkin@mirantis.com>
  * Dmitry Ilyin (idv1985) <dilyin@mirantis.com>
  * Stanislav Makar (smakar) <smakar@mirantis.com>

Testing:
  * Artem Panchenko
  * Yegor Kotko


Work Items
==========

* implement network scheme for Nova-Network. NG. (task 1, in progress)
* change network scheme for Neutron to support linux bridges by default. NG.
  (tasks 2, 4, in progress)
* use native linux bonding. NG, UI. (task 3, NG in progress)
* refactor Multiple-Cluster-L2. NG. (task 5, standby)
* additional parameters for NICs and bonds. NG, UI. (task 6, standby)


Dependencies
============
[1]


Testing
=======
Same as [1] for tasks 1-5.
It will require additional UI testing for task 6.


Documentation Impact
====================
The Documentation should be updated to explain the topologies and scenarios
for Cloud Operators [1]. It should also explain UI flow changes.


References
==========

.. [1] `Blueprint <https://blueprints.launchpad.net/fuel/+spec/refactor-l23-linux-bridges>`_
.. [2] `Transformations. How they work <https://docs.google.com/a/mirantis.com/document/d/1QVoexrDF_MS92IZd4jnwPWQDxTAWMzUUrcMyu8VjGF4>`_
.. [3] `Use network schema for Nova-Network <https://etherpad.openstack.org/p/network-schema-for-nova-network>`_
.. [4] `Bonding parameters on UI. Discussion. <https://etherpad.openstack.org/p/sergey-vitaly-bonding-discussion>`_
