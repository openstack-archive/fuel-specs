==========================================
Support SSL for OpenStack endpoints
==========================================

https://blueprints.launchpad.net/fuel/+spec/ssl-endpoints

OpenStack public endpoints that provide APIs on public networks need to
operate over SSL.

Problem description
===================

OpenStack services receive requests from public networks that are untrusted
area. As the network path between the end-users and the OpenStack services is
untrusted, encryption is required to ensure confidentiality.

We achieve this by implementing Secure Sockets Layer as recommended in the
OpenStack security guide.

Proposed change
===============

OpenStack services can be configured to use SSL/TLS libraries. We propose to
modify the puppet manifests to be able to use SSL/TLS and HTTP services.

This blueprint will focus on HTTP services that provide API endpoints on
public networks. Endpoints used for management and other services like
messaging will not be done in this blueprint.

We will use HAProxy and its support of SSL. The endpoints of public URLs
will be configured with the IP or the name of the HAProxy. It will handle
incoming SSL connections, decryption of the SSL and passing the unencrypted
request to the corresponding service. That means that the communication
between the proxy and the endpoints will not be encrypted.

In this specification we are making the assumption that non HA deployment
is deprecated and Fuel support deploying a single HA mode as descibed here:
https://blueprints.launchpad.net/fuel/+spec/single-controller-ha

Here is a schema of the encryption of the traffic paths:

  1. Between client and OpenStack services:

    ::

                  +-------+    +---------------------+    +------+
      Client +----+ HTTPS +----+ public API endpoint +----+ HTTP |
                  +-------+    +---------------------+    +--+---+
                                                             |
                                                             v
                                                        OSt service

  2. Between OpenStack services:

    ::

                      +------+   +-----------------------+   +------+
      OSt service +---+ HTTP +---+ internal API endpoint +---+ HTTP |
                      +------+   +-----------------------+   +--+---+
                                                                |
                                                                v
                                                           OSt service

It is recommended that an OpenStack service communicate to another OpenStack
service by using the internal API endpoint. Fuel is following this best
practice. If we find a service that is not using the management network to
communicate with another one we should file a bug about this and reconfigure
it to use the internal API endpoint.

Here are the different steps needed to implement SSL with public API
endpoints:

- Install at least the version 1.5.0 of HAProxy because the support of
  SSL is available since this version. As it is not available in Ubuntu (and
  probably it is the same for CentOS) we will need to rebuild it.
  https://bugs.launchpad.net/fuel/+bug/1346365/

- Configure HAProxy to manage SSL connections and to forward the request to
  the corresponding service.

- When an OpenStack service queries another OpenStack service it must use the
  internal API endpoint. If it's not possible, the service needs to be
  configured with the SSL certificate (if self-signed) or the certification
  authority's certificate used by HAProxy.

- We will use a self-signed certificate by default. In terms of encryption it
  is the same than other certificates. Self-signed certificates aren't less
  "secure" but end-users have to assume that they are genuine. If we don't
  want to use self-signed certificate generated by Fuel, the customer will
  have to provide it before deploying the cluster. And to generate the
  certificate, the customer needs to know the public VIP address (or name).
  We will use openssl to manage them so that means that we will add a
  dependency to openssl if it is not already the case.

- As we are using a self-signed certificate by default we need to ensure that
  OpenStack services behave in the same way with a self-signed certificate
  and a CA certificate. As an example, web browser opens a warning window if
  you are using a self-signed certificate and not if you are using a
  certificate issued by a trusted authority.

- The possibility for the user to upload a new certificate is not part of this
  specification. That means that if a user cannot upload a new certificate,
  the deployment can happen but we will use the self-signed certificate.

- In case of "real" HA where several HAProxy are deployed. We need to be able
  to distribute the certificate. If it is a self-signed certificate it will be
  generated by *nailgun* and stored somewhere on the fuel master. Then the
  certificate will be distributed to all nodes that run HAProxy through a
  mechanism like *upload_file*. The certificate is related to a cluster
  because it is valid for a given virtual IP. So if a controller is added to
  the cluster we just reuse the certificate already generated at the creation
  of the cluster and stored on the fuel master node. In case of our
  self signed certificate we will use the VIP because we cannot manage the
  DNS name for the user.

Alternatives
------------

#. Enable SSL for all OpenStack services.

   Cons:
      - API services need to respond quickly and SSL handshake can add a
        significant overhead. Python services do not work well with direct SSL
        integration.
      - You need to manage as many certificates as there are services. The
        problem is even more difficult when services are spread on different
        nodes as it is often the case.

   Pros:
      - It enables SSL on both, public and internal APIs. That means that we
        don't need to be concerned with which endpoint is being used by each
        OpenStack service.

Data model impact
-----------------

None

REST API impact
---------------

The REST API needs to be modified to allow a user to add and update its
certificate. Certificate must be spread on all controllers. This feature is
not absolutely needed for the deployment of a new cluster since a default
self-signed certificate is used. Having said that user certainly want to be
able to download a new certificate for a given cluster but it is not in the
scope of this specification.

It could be interesting to have an indicator in the UI that says that the
certificate is the default self-signed one.

Upgrade impact
--------------

The main problem is how can we support the upgrade of an environment that has
been deployed without the support for SSL. To manage cluster deployed before
the update, nailgun uses previous version of manifests. That means that there
will be one version of puppet manifest without SSL support and the new version
with SSL support. Both should work with last version of HAProxy since the
version build by fuel OSCI team supports the declaration of several
configuration files into a directory (that is not the case for the upstream
version of HAProxy). See https://bugs.launchpad.net/fuel/+bug/1346365


Security impact
---------------

By using SSL/TLS over HTTP services, we will be able to provide a secure
system with authentication and confidentiality.

As SSL certificates are sensitive data we should be certain that they are not
stored in logs or in a database in case of diagnostic snapshot.


Notifications impact
--------------------

We need to notify where the certificate that must be used by client can be
downloaded. It can be done by showing the curl command that can be used.

Other end user impact
---------------------

We generate certificate that ends ten years later. As an end user can upload
its own certificate the delay can be shorter. Thus we need to monitor the
expiration date of the certificate and must warn before it expires. A solution
could be to add a line in the crontab according to date of expiration.

As we are using a self-signed certificate by default, if a user is using a
web browser to query OpenStack services there will be a popup to warn than
the certificate can not be trusted.

Performance Impact
------------------

The SSL-overhead is generally small. The major cost of HTTPS is the SSL
handshaking so depending the typical session length and the caching behavior
of clients the overhead may be different. For very short sessions you can see
performance issue.

The internal communications between services involved many API calls for
small tasks and this is why we will not implement SSL endpoints for the
management network. OpenStack services need to be configure properly.

Other deployer impact
---------------------

OpenStack services will only use internal/admin URLs. Thus we must be sure
that all services can communicate through the management network.

The work flow is to deploy the cluster with a self-signed certificate that was
generated by astute at the creation of the cluster. This certificate must
be store somewhere on the fuel master node with the appropriate rights. When
the cluster is created, if it is available (it is not in the scope of this
specification) the user can download its own certificate for the given VIP.
If it cannot download it or don't want to use another certificate then
everything will work fine with the self signed certificate.

Developer impact
----------------

Maybe OSTF team (health check team) is going to be affected by changing
OpenStack endpoints. Need to be checked.

Implementation
==============

Assignee(s)
-----------

Primary assignee:
  guillaume-thouvenin

Work Items
----------

- Generate a self-signed certificate that will be used for authentication.

- Install HAProxy and configure it to handle SSL connections and forward
  requests to the corresponding service.

- Check that the following services are configured to use internal URL
  for communicating with other OpenStack services.

    - nova
    - glance
    - neutron
    - horizon
    - cinder
    - keystone
    - heat
    - ceilometer
    - *other? ...*

Dependencies
============

- openssl
- haproxy >= 1.5

Testing
=======

Build a new fuel ISO and test if the deployment corresponds to what is
expected. We need to check with the QA team how the modification of endpoint
will affect them. We need their approbation here.

Documentation Impact
====================

As we will generate a self-signed certificate to allow the usage of SSL for
API public endpoints, we need to document how to get this certificate if an
end-user want to use a CLI (for example nova CLI) to interact with OpenStack
services. When the end-user will be able to upload a certificate, the CN
should comply with few rules:

    - It should match with what is configured in Keystone (public URLs).
    - It should resolve to the expected IP address if it is a name.

References
==========

- https://blueprints.launchpad.net/fuel/+spec/ssl-endpoints
- https://blueprints.launchpad.net/fuel/+spec/single-controller-ha
- https://bugs.launchpad.net/fuel/+bug/1346365
- http://docs.openstack.org/security-guide/content/ch020_ssl-everywhere.html
- https://help.ubuntu.com/community/OpenSSL
- http://blog.haproxy.com/2012/09/10/how-to-get-ssl-with-haproxy-getting-rid-of-stunnel-stud-nginx-or-pound/
