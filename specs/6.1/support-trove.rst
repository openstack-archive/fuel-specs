======================================
Support Trove
======================================

https://blueprints.launchpad.net/fuel/+spec/support-trove

This blueprint describe Trove plugin for Fuel.

Problem description
===================

Sometimes Fuel user wants to extend Fuel to install Trove
plugin. Right now user changes the code of Fuel services rebuilds
and adds repositories maanually.

The current approach causes a problem:
* user has to apply all patches manually after Fuel upgraded.

Proposed change
===============

List of terms
-------------

* plugin - archive which contains all required data, like
  repositories for ubuntu, centis, metadata file with description
  of Trove plugin, scripts, etc
* fuel-plugin-builder - is Fuel plugin builder, command
  line tool which helps user to develop plugin, the code will be
  in fuel-web repository

Requirements
------------

* user should be able to install simple Trove plugins, simple means that
  plugin does not require additional business logic, user can configure only
  static data for settings tab
* plugin developer in the most cases should know nothing
  about python/js/css/html
* plugin developer should have easy way to test his plugin
  (he shouldn't reinstall his master node again and again to
  test his plugin)
* plugin should be environment specific, it means that user
  should be able to enable or disable plugins for specific
  environment, plugin should be disabled for deployed environments
  without possibility to enable it

Plugins constraints
-------------------

For the current release we have the next constraints:

* plugin cannot change business logic and should not contain
  any python code
* plugin can provide additional attributes for environment, it cannot
  remove or change existing information which we provide for orchestrator
* plugin cannot add new kernel
* plugin cannot change provisioning data
* user will not be able to enable plugin on deployed environment
* plugin cannot change or add new bootstrap image
* plugin cannot be uninstalled in the first feature release
* plugin cannot change existing database schema
* plugins will work on openstack releases after 6.1 Fuel release.
  This constraint is related to changes in MCollective plugins

Plugin development process
--------------------------

We should keep tracking and updating with puppet-trove as our puppet module.

HA with multi-node architectures should be considered when design Trove
plugin.

Plugin developer will be able to develop plugin on his machine,
we will specify all requirements for environment, like version
of OS and additional dependencies.

* plugin developer installs all of the dependencies which are mentioned
  in development document to prepare his env, like python, rpm, createrepo,
  dpkg-dev
* plugin developer installs `fpb` command line tool
  `pip install fuel-plugin-builder`
* plugin developer runs `fpb --create plugin-name`
* fpb creates new directory `plugin-name`, where he can see
  the a basic structure of the plugin with in place documentation
* plugin developer adds his packages with all required dependencies
  for ubuntu and centos
* sets the metadata, like version of the plugin, its description,
  and versions of openstack releases
* then he runs `fpb --build plugin-name` from the plugin directory,
  fpb checks, that all required fields are valid and all
  required files are there, builds the repositories and generates
  tar-ball

Note, `fpb` should provide `--debug` key to turn on debug information.

Checks and validation
^^^^^^^^^^^^^^^^^^^^^

`fpb` should perform checks during the plugin build

* check that metadata is correct
* deploymetn_scripts_path is exists for each release
* repositories_path is exists for each release
* tasks.yaml, check the structure

Plugin installation process
---------------------------

From user point of view:

* user downloads a fuel plugin
* runs `fuel plugins --install fuel-plugin-name-1.0.0.fp`,
  and plugin is installed

Install script workflow:

* check if current fuel version is compatible with the plugin
* copy all the files in `/var/www/plugins/plugin_name-plugin_version`
* via rest api create plugin in nailgun

Plugin archive structure
------------------------

This structure should be generated by `fpb` script.

.. code-block:: text

    .
    |-- deployment_scripts
    |   `-- deploy.sh
    |-- environment_config.yaml
    |-- LICENSE
    |-- metadata.yaml
    |-- pre_build_hook
    |-- README.md
    |-- repositories
    |   |-- centos
    |   |   `-- .gitkeep
    |   `-- ubuntu
    |       `-- .gitkeep
    `-- tasks.yaml

Directories structure on the master node
----------------------------------------

Directory `/var/www/plugins` which contains all
of the plugins, should be mounted to the next containers.

* rsync - for puppet manifests
* nailgun - to extend nailgun
* nginx - is required for repositories

Plugins upgrade
---------------

User wants to be able to upgrade his plugin, if there will be some new
plugin with updated version of package or other bug fixes.
For the current version we **don't** provide any upgrade mechanism
for plugins. In theory we could use this mechanism if openstack patching
feature was not experimental.

Alternatives
------------

Using optionnal element in Fuel deployment like Savana or Murano.

Data model impact
-----------------

None

REST API impact
---------------

None

Deployment scripts
------------------

Plugin developer can use any bash scripts or
puppet manifests in order to perform plugin
installation, here is a list of requirements
for the scripts

* if user wants the script to be executed it
  should has right permission and executable
  flag
* if user uses puppet for plugins installation
  he should provide puppet manifests and modules
  in his plugin
* scripts should not break anything if they were
  run several times

Upgrade impact
--------------

Current release
^^^^^^^^^^^^^^^

Because we don't have any python code in our plugins, plugin will depend on
openstack release, we don't delete releases, as result it's not necessary
to check if plugin is compatible with the current version of fuel.
Also plugin is stored on shared volume which we mount to nailgun container.

Security impact
---------------

Security is included in acceptance criteria of plugins certification,
see `Plugins certification` section.

Notifications impact
--------------------

Installation script will create notification after plugin is installed.

Other end user impact
---------------------

User should be able to disable or enable Trove plugin for specific
environment.

Performance Impact
------------------

**Deployment**

* there will not be any impacts if user doesn't have enabled plugins
* if user has enabled plugins for environment, there will be performance
  impact, the time of deployment will be increased, the increasing time
  depends on the way how plugin is written

**Nailgun**

* we assume that there will not be any notable performance impact, in hooks
  we will have to enable merging of custom attributes in case if plugin is
  enabled for environment, the list of the plugins can be gotten within a
  single database query

Also performance is added as acceptance criteria for core plugins,
see `Plugins certification` section.

Other deployer impact
---------------------

Plugin developer will be able to execute pre/post deployment hooks for
the environment.

Changes which are required in astute:

* add several repositories (should be ready, testing is required)
* add posibility to rsync specific directories from master to slave
* add hooks execution before and after puppet run

Plugins certification
---------------------

The topic isn't covered by this document, separate document needs
to be created.

Items which should be reviewed during plugin certification:

* Security review
* Performance review
* Compatibility with other plugins in core
* Plugins upgrade
* Check that plugin works fine in case of openstack patching

After plugin is certified user should be able to add plugin in our
plugins repository.

Developer impact
----------------

Features design impacts:

* any new feature should be considered to be a plugin
* features should be designed to be extendable

Development impacts:

* we should try not to break compatibility with plugins, it should be
  very easy for plugins developer to make migration from previous
  version of Fuel to new one

Implementation
==============

Assignee(s)
-----------

Primary assignee:

* rico-lin

Work Items
----------

* Plugin creation tools - creates plugin skeleton, builds the plugin,
  also it should provide installation script

* Nailgun - should provide ability to enable/disable plugins
  for specific environments, also it should read plugin's attributes
  and merge them on the fly

* Nailgun/Orchestrator - nailgun should provide post/pre deploy tasks
  for orchestrator, orchestrator should provide post/pre deploy hooks

* UI - ability to enable/disable plugin for specific environment

* Fuel CLI - list/enable/disable/configure plugins for environment

Dependencies
============

None

Testing
=======

There will be several core plugins, which QA team will be able
to install and test.

Trove plugin should be included in our testing cycle, it means that we
should run system tests with plugins, and also run plugins specific tests.

Documentation Impact
====================

* how to install a Trove plugin

References
==========

* Trove - https://wiki.openstack.org/wiki/Trove
* Plugins certification meeting -
  https://etherpad.openstack.org/p/cinder-neutron-plugins-certification
* fuel plugins repository - https://github.com/stackforge/fuel-plugins
